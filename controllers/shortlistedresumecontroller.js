const Shortlisted_Resume = require("../models/ShortlistResumeSchema.js");

class ShorlistedResumeController {
  static addshortlistedresume = async (req, res) => {
    const {
      cand_id,
      job_id,
      resume_rank,
      resume_url,
      resume_matched_job,
      cand_positionApplied,
    } = req.body;
    if (
      cand_id &&
      job_id &&
      resume_rank &&
      resume_url &&
      resume_matched_job &&
      cand_positionApplied
    ) {
      try {
        let str = "EUR-RS-";
        let x = Date.now().toString(8);
        let y = x.toString().substr(-3);
        let z = Math.floor(Math.random() * 1000);
        let autoGeneratedResumeShortlistedID = str + y + z;
        const newShortlistedResume = new Shortlisted_Resume({
          short_resume_id: autoGeneratedResumeShortlistedID,
          cand_id: cand_id,
          job_id: job_id,
          cand_positionApplied: cand_positionApplied,
          resume_rank: resume_rank,
          resume_matched_job: resume_matched_job,
          resume_url: resume_url,
          test_link_status: "Not Assigned",
        });
        newShortlistedResume.save();
        res.status(200).json({ message: "New Resume Shortlisted" });
      } catch (error) {
        res
          .status(500)
          .json({ message: "Failed to add New Resume Shortlisted" });
      }
    } else {
      res.send({ status: "Failed", message: "Fill All Fields" });
    }
  };

  static getShortlistedResumes = async (req, res) => {
    try {
      const getallshortlistedresumes = await Shortlisted_Resume.find({});
      res.send({ getallshortlistedresumes });
    } catch (error) {
      res.send({
        status: "Failed",
        message: "Failed to retrieve shortlisted resumes",
      });
    }
  };

  static updateStatusTestLink = async (req, res) => {
    try {
      const { test_link_status } = req.body;
      var UpdatedTestLinkStatus = {
        test_link_status: test_link_status,
      };
      Shortlisted_Resume.findOneAndUpdate(
        { cand_id: req.params.cid, job_id: req.params.jid },
        UpdatedTestLinkStatus,
        { new: true },
        function (err, UpdatedTestLinkStatus) {
          if (err) {
            console.log("err", err);
            res.status(500).send(err);
          } else {
            res.status(200).send("Updated Test Link Status");
          }
        }
      );
    } catch (error) {
      res.send({
        status: "Failed",
        message: "Failed to update Test Link Status",
      });
    }
  };
}

module.exports = ShorlistedResumeController;
